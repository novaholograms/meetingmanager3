const XLSX = require('xlsx');
const fs = require('fs');
const path = require('path');

console.log('=== AN√ÅLISIS DE C√ìDIGOS DUPLICADOS ===\n');

// Buscar el archivo Excel m√°s reciente
const attachedDir = './attached_assets';
const files = fs.readdirSync(attachedDir).filter(f => f.includes('.xlsx') && f.includes('temas dani'));
const latestFile = files.sort().pop();
const filePath = path.join(attachedDir, latestFile);

console.log(`üìÅ Analizando c√≥digos duplicados en: ${latestFile}\n`);

try {
  // Leer el archivo Excel
  const workbook = XLSX.readFile(filePath, {
    cellDates: true,
    dateNF: 'dd/mm/yyyy',
    cellFormula: false,
    cellStyles: false,
  });

  const worksheet = workbook.Sheets[workbook.SheetNames[0]];
  const data = XLSX.utils.sheet_to_json(worksheet, {
    defval: null,
    raw: false
  });

  console.log(`üìä Total de filas: ${data.length}\n`);

  // Funci√≥n para obtener valores de columnas
  const getColumnValue = (row, possibleNames) => {
    for (const name of possibleNames) {
      if (row[name] !== undefined && row[name] !== null && row[name] !== '') {
        return String(row[name]).trim();
      }
    }
    return null;
  };

  // Mapear c√≥digos y sus apariciones
  const codeMap = new Map();
  const codeDetails = [];

  data.forEach((row, index) => {
    const rowNum = index + 2; // +2 porque Excel empieza en 1 y tiene header
    
    const taskCode = getColumnValue(row, ['C√≥digo', 'Codigo', 'codigo', 'Code']);
    const meetingTitle = getColumnValue(row, ['T√≠tulo Reuni√≥n', 'Titulo Reunion']);
    const projectName = getColumnValue(row, ['Proyecto/Comit√©', 'Proyecto/Comite']);
    const keyPointTitle = getColumnValue(row, ['Temas (nivel 4)', 'Temas']);
    
    if (taskCode) {
      if (!codeMap.has(taskCode)) {
        codeMap.set(taskCode, []);
      }
      
      const occurrence = {
        row: rowNum,
        code: taskCode,
        meeting: meetingTitle || '[SIN T√çTULO]',
        project: projectName || '[SIN PROYECTO]',
        theme: keyPointTitle || '[SIN TEMA]'
      };
      
      codeMap.get(taskCode).push(occurrence);
      codeDetails.push(occurrence);
    }
  });

  // Identificar c√≥digos duplicados
  const duplicatedCodes = [];
  codeMap.forEach((occurrences, code) => {
    if (occurrences.length > 1) {
      duplicatedCodes.push({
        code: code,
        count: occurrences.length,
        occurrences: occurrences
      });
    }
  });

  // Mostrar estad√≠sticas
  console.log('üìä ESTAD√çSTICAS DE C√ìDIGOS:');
  console.log(`   Total de c√≥digos √∫nicos: ${codeMap.size}`);
  console.log(`   Total de filas con c√≥digo: ${codeDetails.length}`);
  console.log(`   C√≥digos duplicados: ${duplicatedCodes.length}`);
  console.log('');

  // Mostrar c√≥digos duplicados detallados
  if (duplicatedCodes.length > 0) {
    console.log('üîÑ C√ìDIGOS DUPLICADOS ENCONTRADOS:\n');
    
    duplicatedCodes.sort((a, b) => parseInt(a.code) - parseInt(b.code));
    
    duplicatedCodes.forEach((duplicate, index) => {
      console.log(`‚ùå C√ìDIGO ${duplicate.code} (${duplicate.count} apariciones):`);
      
      duplicate.occurrences.forEach((occurrence, occIndex) => {
        console.log(`   ${occIndex + 1}. Fila ${occurrence.row}:`);
        console.log(`      üìã Reuni√≥n: ${occurrence.meeting}`);
        console.log(`      üè¢ Proyecto: ${occurrence.project}`);
        console.log(`      üìù Tema: ${occurrence.theme}`);
      });
      
      console.log('');
      if (index >= 4) { // Limitar output para los primeros 5 c√≥digos duplicados
        console.log(`... y ${duplicatedCodes.length - 5} c√≥digos duplicados m√°s\n`);
        return; // Salir del forEach
      }
    });
  }

  // An√°lisis de impacto
  console.log('üìã AN√ÅLISIS DE IMPACTO EN LA IMPORTACI√ìN:\n');
  
  console.log('üîç ¬øC√ìMO AFECTA AL SISTEMA?');
  console.log('1. CREACI√ìN DE TAREAS:');
  console.log('   ‚Ä¢ Cada fila intentar√° crear una tarea con su c√≥digo');
  console.log('   ‚Ä¢ Si el c√≥digo ya existe, puede causar error de clave duplicada');
  console.log('   ‚Ä¢ O puede sobreescribir la tarea existente');
  console.log('');
  
  console.log('2. ASOCIACIONES CON REUNIONES:');
  console.log('   ‚Ä¢ Mismo tema/c√≥digo se discute en m√∫ltiples reuniones');
  console.log('   ‚Ä¢ Una tarea puede estar asociada a varias reuniones');
  console.log('   ‚Ä¢ Esto puede ser v√°lido si el tema se trata en varios meetings');
  console.log('');
  
  console.log('3. PROPUESTAS Y RESPUESTAS:');
  console.log('   ‚Ä¢ Cada fila puede generar propuestas diferentes para el mismo c√≥digo');
  console.log('   ‚Ä¢ Una tarea puede tener m√∫ltiples propuestas de diferentes reuniones');
  console.log('   ‚Ä¢ Esto enriquece el contexto del tema');
  console.log('');

  // Recomendaciones espec√≠ficas
  console.log('üéØ RECOMENDACIONES DE GESTI√ìN:\n');
  
  console.log('OPCI√ìN 1 - MANTENER C√ìDIGOS DUPLICADOS (RECOMENDADO):');
  console.log('‚úÖ Permite que un tema se trate en m√∫ltiples reuniones');
  console.log('‚úÖ Una tarea puede tener varias propuestas de diferentes contextos');
  console.log('‚úÖ Refleja la realidad: temas recurrentes en diferentes meetings');
  console.log('‚ö†Ô∏è  Requiere l√≥gica de fusi√≥n/agrupaci√≥n en el sistema');
  console.log('');
  
  console.log('OPCI√ìN 2 - GENERAR C√ìDIGOS √öNICOS:');
  console.log('‚ö†Ô∏è  Crear subc√≥digos: 002-1, 002-2, 002-3 para cada aparici√≥n');
  console.log('‚ö†Ô∏è  Perder√≠a la conexi√≥n conceptual entre apariciones del mismo tema');
  console.log('‚ùå No refleja que es el mismo tema discutido en diferentes contextos');
  console.log('');

  console.log('OPCI√ìN 3 - FUSIONAR FILAS CON MISMO C√ìDIGO:');
  console.log('‚ö†Ô∏è  Combinar propuestas y respuestas en una sola entrada');
  console.log('‚ùå Perder√≠a el contexto espec√≠fico de cada reuni√≥n');
  console.log('‚ùå Perder√≠a la trazabilidad temporal');
  console.log('');

  // Mostrar ejemplos espec√≠ficos
  if (duplicatedCodes.length > 0) {
    const ejemplo = duplicatedCodes[0];
    console.log(`üí° EJEMPLO PR√ÅCTICO - C√ìDIGO ${ejemplo.code}:`);
    console.log('   Este tema se trata en m√∫ltiples contextos:');
    ejemplo.occurrences.forEach((occ, i) => {
      console.log(`   ${i + 1}. ${occ.meeting} (${occ.project})`);
    });
    console.log('   ‚û°Ô∏è  Cada contexto puede aportar diferentes perspectivas del mismo tema');
    console.log('');
  }

} catch (error) {
  console.error('‚ùå Error al procesar el archivo:', error.message);
}